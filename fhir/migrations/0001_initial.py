# Generated by Django 4.2.7 on 2025-07-22 04:48

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FHIRCommunication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(help_text='Unique identifier for this resource', max_length=255, unique=True)),
                ('version', models.CharField(default='1', help_text='Version of this resource', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta', models.JSONField(blank=True, default=dict, help_text='Metadata about the resource')),
                ('text', models.JSONField(blank=True, default=dict, help_text='Text summary of the resource')),
                ('contained', models.JSONField(blank=True, default=list, help_text='Contained resources')),
                ('extension', models.JSONField(blank=True, default=list, help_text='Additional content defined by implementations')),
                ('sender', models.CharField(help_text='Reference to the sender', max_length=255)),
                ('sender_type', models.CharField(choices=[('patient', 'Patient'), ('practitioner', 'Practitioner'), ('organization', 'Organization'), ('related-person', 'Related Person'), ('device', 'Device')], default='practitioner', help_text='Type of sender', max_length=20)),
                ('recipient', models.CharField(help_text='Reference to the recipient', max_length=255)),
                ('recipient_type', models.CharField(choices=[('patient', 'Patient'), ('practitioner', 'Practitioner'), ('organization', 'Organization'), ('related-person', 'Related Person'), ('device', 'Device')], default='patient', help_text='Type of recipient', max_length=20)),
                ('status', models.CharField(choices=[('preparation', 'Preparation'), ('in-progress', 'In Progress'), ('not-done', 'Not Done'), ('on-hold', 'On Hold'), ('stopped', 'Stopped'), ('completed', 'Completed'), ('entered-in-error', 'Entered in Error'), ('unknown', 'Unknown')], default='completed', help_text='Status of the communication', max_length=20)),
                ('sent', models.DateTimeField(help_text='When sent')),
                ('received', models.DateTimeField(blank=True, help_text='When received', null=True)),
                ('category', models.CharField(choices=[('alert', 'Alert'), ('notification', 'Notification'), ('reminder', 'Reminder'), ('instruction', 'Instruction'), ('summary', 'Summary'), ('note', 'Note'), ('question', 'Question'), ('response', 'Response')], default='notification', help_text='Category of communication', max_length=50)),
                ('subject', models.CharField(blank=True, help_text='Subject line', max_length=255)),
                ('content', models.TextField(help_text='Content of the communication')),
                ('content_type', models.CharField(choices=[('text', 'Text'), ('html', 'HTML'), ('markdown', 'Markdown')], default='text', help_text='Type of content', max_length=20)),
                ('priority', models.CharField(choices=[('routine', 'Routine'), ('urgent', 'Urgent'), ('asap', 'ASAP'), ('stat', 'Stat')], default='routine', help_text='Priority of communication', max_length=20)),
                ('medium', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('app', 'App Notification'), ('phone', 'Phone'), ('video', 'Video'), ('in-person', 'In Person'), ('other', 'Other')], default='app', help_text='Medium of communication', max_length=20)),
                ('has_attachments', models.BooleanField(default=False, help_text='Whether the communication has attachments')),
                ('attachments', models.JSONField(blank=True, default=list, help_text='Attachments to the communication')),
            ],
            options={
                'verbose_name': 'FHIR Communication',
                'verbose_name_plural': 'FHIR Communications',
            },
        ),
        migrations.CreateModel(
            name='FHIRCondition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(help_text='Unique identifier for this resource', max_length=255, unique=True)),
                ('version', models.CharField(default='1', help_text='Version of this resource', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta', models.JSONField(blank=True, default=dict, help_text='Metadata about the resource')),
                ('text', models.JSONField(blank=True, default=dict, help_text='Text summary of the resource')),
                ('contained', models.JSONField(blank=True, default=list, help_text='Contained resources')),
                ('extension', models.JSONField(blank=True, default=list, help_text='Additional content defined by implementations')),
                ('code', models.CharField(help_text='Identification of the condition (SNOMED CT code)', max_length=100)),
                ('code_system', models.CharField(default='http://snomed.info/sct', help_text='Code system', max_length=100)),
                ('code_display', models.CharField(help_text='Human-readable description of the condition', max_length=255)),
                ('clinical_status', models.CharField(choices=[('active', 'Active'), ('recurrence', 'Recurrence'), ('relapse', 'Relapse'), ('inactive', 'Inactive'), ('remission', 'Remission'), ('resolved', 'Resolved')], default='active', help_text='Clinical status of the condition', max_length=20)),
                ('verification_status', models.CharField(choices=[('unconfirmed', 'Unconfirmed'), ('provisional', 'Provisional'), ('differential', 'Differential'), ('confirmed', 'Confirmed'), ('refuted', 'Refuted'), ('entered-in-error', 'Entered in Error')], default='confirmed', help_text='Verification status of the condition', max_length=20)),
                ('category', models.CharField(choices=[('problem-list-item', 'Problem List Item'), ('encounter-diagnosis', 'Encounter Diagnosis'), ('health-concern', 'Health Concern')], default='problem-list-item', help_text='Category of the condition', max_length=50)),
                ('severity', models.CharField(blank=True, choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe')], help_text='Subjective severity of condition', max_length=20)),
                ('onset_date', models.DateTimeField(blank=True, help_text='Date when condition first manifested', null=True)),
                ('abatement_date', models.DateTimeField(blank=True, help_text='Date when condition resolved', null=True)),
                ('recorded_date', models.DateTimeField(auto_now_add=True, help_text='Date when condition was first recorded')),
                ('body_site', models.JSONField(blank=True, default=list, help_text='Anatomical location')),
                ('note', models.TextField(blank=True, help_text='Additional information about the condition')),
                ('is_nmosd', models.BooleanField(default=False, help_text='Whether this condition is NMOSD')),
                ('nmosd_subtype', models.CharField(blank=True, choices=[('aqp4-positive', 'AQP4-IgG Positive'), ('mog-positive', 'MOG-IgG Positive'), ('double-negative', 'Double Negative (AQP4 and MOG negative)'), ('unknown', 'Unknown')], help_text='NMOSD subtype', max_length=50)),
            ],
            options={
                'verbose_name': 'FHIR Condition',
                'verbose_name_plural': 'FHIR Conditions',
            },
        ),
        migrations.CreateModel(
            name='FHIREncounter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(help_text='Unique identifier for this resource', max_length=255, unique=True)),
                ('version', models.CharField(default='1', help_text='Version of this resource', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta', models.JSONField(blank=True, default=dict, help_text='Metadata about the resource')),
                ('text', models.JSONField(blank=True, default=dict, help_text='Text summary of the resource')),
                ('contained', models.JSONField(blank=True, default=list, help_text='Contained resources')),
                ('extension', models.JSONField(blank=True, default=list, help_text='Additional content defined by implementations')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('arrived', 'Arrived'), ('triaged', 'Triaged'), ('in-progress', 'In Progress'), ('onleave', 'On Leave'), ('finished', 'Finished'), ('cancelled', 'Cancelled'), ('entered-in-error', 'Entered in Error'), ('unknown', 'Unknown')], default='planned', help_text='Status of the encounter', max_length=20)),
                ('class_code', models.CharField(choices=[('ambulatory', 'Ambulatory'), ('emergency', 'Emergency'), ('home', 'Home'), ('inpatient', 'Inpatient'), ('virtual', 'Virtual'), ('other', 'Other')], default='virtual', help_text='Classification of the encounter', max_length=20)),
                ('start', models.DateTimeField(help_text='Start time of the encounter')),
                ('end', models.DateTimeField(blank=True, help_text='End time of the encounter', null=True)),
                ('type_code', models.CharField(blank=True, help_text='Type of encounter (SNOMED CT code)', max_length=100)),
                ('type_display', models.CharField(blank=True, help_text='Human-readable description of the encounter type', max_length=255)),
                ('service_type', models.CharField(blank=True, help_text='Specific type of service', max_length=100)),
                ('priority', models.CharField(choices=[('routine', 'Routine'), ('urgent', 'Urgent'), ('asap', 'ASAP'), ('stat', 'Stat')], default='routine', help_text='Priority of the encounter', max_length=20)),
                ('participants', models.JSONField(blank=True, default=list, help_text='List of participants in the encounter')),
                ('location', models.CharField(blank=True, help_text='Location of the encounter', max_length=255)),
                ('reason_code', models.CharField(blank=True, help_text='Reason for the encounter', max_length=100)),
                ('reason_display', models.CharField(blank=True, help_text='Human-readable description of the reason', max_length=255)),
                ('is_telemedicine', models.BooleanField(default=True, help_text='Whether this is a telemedicine encounter')),
                ('telemedicine_platform', models.CharField(blank=True, choices=[('zoom', 'Zoom'), ('webex', 'Webex'), ('teams', 'Microsoft Teams'), ('google-meet', 'Google Meet'), ('custom', 'Custom Platform'), ('other', 'Other')], help_text='Telemedicine platform used', max_length=50)),
                ('video_url', models.URLField(blank=True, help_text='URL for the video session')),
                ('meeting_id', models.CharField(blank=True, help_text='Meeting ID for the video session', max_length=255)),
                ('password', models.CharField(blank=True, help_text='Password for the video session', max_length=255)),
                ('notes', models.TextField(blank=True, help_text='Notes about the encounter')),
            ],
            options={
                'verbose_name': 'FHIR Encounter',
                'verbose_name_plural': 'FHIR Encounters',
            },
        ),
        migrations.CreateModel(
            name='FHIRMedicationStatement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(help_text='Unique identifier for this resource', max_length=255, unique=True)),
                ('version', models.CharField(default='1', help_text='Version of this resource', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta', models.JSONField(blank=True, default=dict, help_text='Metadata about the resource')),
                ('text', models.JSONField(blank=True, default=dict, help_text='Text summary of the resource')),
                ('contained', models.JSONField(blank=True, default=list, help_text='Contained resources')),
                ('extension', models.JSONField(blank=True, default=list, help_text='Additional content defined by implementations')),
                ('medication', models.CharField(help_text='Name of the medication', max_length=255)),
                ('medication_code', models.CharField(blank=True, help_text='Code for the medication (RxNorm code)', max_length=100)),
                ('medication_system', models.CharField(blank=True, default='http://www.nlm.nih.gov/research/umls/rxnorm', help_text='Code system', max_length=100)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('entered-in-error', 'Entered in Error'), ('intended', 'Intended'), ('stopped', 'Stopped'), ('on-hold', 'On Hold'), ('unknown', 'Unknown'), ('not-taken', 'Not Taken')], default='active', help_text='Status of the medication statement', max_length=20)),
                ('effective_date', models.DateTimeField(help_text='When the statement was effective')),
                ('date_asserted', models.DateTimeField(auto_now_add=True, help_text='When the statement was asserted')),
                ('dosage', models.JSONField(blank=True, default=list, help_text='How the medication is taken')),
                ('reason_code', models.CharField(blank=True, help_text='Reason for taking medication', max_length=100)),
                ('reason_reference', models.CharField(blank=True, help_text='Condition or observation that supports why the medication is being taken', max_length=255)),
                ('note', models.TextField(blank=True, help_text='Additional information about the medication statement')),
                ('adherence_status', models.CharField(choices=[('adherent', 'Adherent'), ('partially-adherent', 'Partially Adherent'), ('non-adherent', 'Non-Adherent'), ('unknown', 'Unknown')], default='unknown', help_text='Medication adherence status', max_length=20)),
                ('adherence_score', models.IntegerField(blank=True, help_text='Adherence score (0-100)', null=True)),
            ],
            options={
                'verbose_name': 'FHIR Medication Statement',
                'verbose_name_plural': 'FHIR Medication Statements',
            },
        ),
        migrations.CreateModel(
            name='FHIRObservation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(help_text='Unique identifier for this resource', max_length=255, unique=True)),
                ('version', models.CharField(default='1', help_text='Version of this resource', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta', models.JSONField(blank=True, default=dict, help_text='Metadata about the resource')),
                ('text', models.JSONField(blank=True, default=dict, help_text='Text summary of the resource')),
                ('contained', models.JSONField(blank=True, default=list, help_text='Contained resources')),
                ('extension', models.JSONField(blank=True, default=list, help_text='Additional content defined by implementations')),
                ('code', models.CharField(help_text='Type of observation (LOINC or SNOMED CT code)', max_length=100)),
                ('code_system', models.CharField(default='http://loinc.org', help_text='Code system', max_length=100)),
                ('code_display', models.CharField(help_text='Human-readable description of the code', max_length=255)),
                ('value', models.FloatField(blank=True, help_text='Numeric value of the observation', null=True)),
                ('value_string', models.CharField(blank=True, help_text='String value of the observation', max_length=255)),
                ('value_boolean', models.BooleanField(blank=True, help_text='Boolean value of the observation', null=True)),
                ('unit', models.CharField(blank=True, help_text='Unit of the observation value', max_length=50)),
                ('effective_date', models.DateTimeField(help_text='When the observation was made')),
                ('issued', models.DateTimeField(auto_now_add=True, help_text='When the observation was issued')),
                ('status', models.CharField(choices=[('registered', 'Registered'), ('preliminary', 'Preliminary'), ('final', 'Final'), ('amended', 'Amended'), ('corrected', 'Corrected'), ('cancelled', 'Cancelled'), ('entered-in-error', 'Entered in Error'), ('unknown', 'Unknown')], default='final', help_text='Status of the observation', max_length=20)),
                ('category', models.CharField(choices=[('vital-signs', 'Vital Signs'), ('laboratory', 'Laboratory'), ('imaging', 'Imaging'), ('social-history', 'Social History'), ('exam', 'Exam'), ('therapy', 'Therapy'), ('activity', 'Activity'), ('survey', 'Survey'), ('neurological', 'Neurological')], default='vital-signs', help_text='Category of observation', max_length=50)),
                ('reference_range_low', models.FloatField(blank=True, help_text='Lower limit of reference range', null=True)),
                ('reference_range_high', models.FloatField(blank=True, help_text='Upper limit of reference range', null=True)),
                ('reference_range_text', models.CharField(blank=True, help_text='Text description of reference range', max_length=255)),
                ('device_id', models.CharField(blank=True, help_text='ID of the device that generated the observation', max_length=255)),
                ('device_name', models.CharField(blank=True, help_text='Name of the device that generated the observation', max_length=255)),
                ('component', models.JSONField(blank=True, default=list, help_text='Component observations (e.g., systolic and diastolic BP)')),
                ('wearable_source', models.CharField(blank=True, choices=[('apple_health', 'Apple Health'), ('google_fit', 'Google Fit'), ('fitbit', 'Fitbit'), ('samsung_health', 'Samsung Health'), ('withings', 'Withings'), ('garmin', 'Garmin'), ('oura', 'Oura Ring'), ('whoop', 'Whoop'), ('other', 'Other')], help_text='Source wearable device platform', max_length=50)),
                ('is_nmosd_indicator', models.BooleanField(default=False, help_text='Whether this is a NMOSD-specific indicator')),
                ('nmosd_indicator_type', models.CharField(blank=True, choices=[('tremor', 'Tremor'), ('gait', 'Gait Analysis'), ('balance', 'Balance'), ('fatigue', 'Fatigue'), ('vision', 'Vision'), ('pain', 'Pain'), ('spasticity', 'Spasticity'), ('other', 'Other')], help_text='Type of NMOSD indicator', max_length=50)),
            ],
            options={
                'verbose_name': 'FHIR Observation',
                'verbose_name_plural': 'FHIR Observations',
            },
        ),
        migrations.CreateModel(
            name='FHIROrganization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(help_text='Unique identifier for this resource', max_length=255, unique=True)),
                ('version', models.CharField(default='1', help_text='Version of this resource', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta', models.JSONField(blank=True, default=dict, help_text='Metadata about the resource')),
                ('text', models.JSONField(blank=True, default=dict, help_text='Text summary of the resource')),
                ('contained', models.JSONField(blank=True, default=list, help_text='Contained resources')),
                ('extension', models.JSONField(blank=True, default=list, help_text='Additional content defined by implementations')),
                ('name', models.CharField(help_text='Organization name', max_length=255)),
                ('alias', models.JSONField(blank=True, default=list, help_text='Alternative names for the organization')),
                ('type', models.CharField(choices=[('prov', 'Healthcare Provider'), ('dept', 'Hospital Department'), ('team', 'Organizational Team'), ('govt', 'Government'), ('ins', 'Insurance Company'), ('pay', 'Payer'), ('edu', 'Educational Institution'), ('reli', 'Religious Institution'), ('crs', 'Clinical Research Sponsor'), ('cg', 'Community Group'), ('bus', 'Non-Healthcare Business'), ('other', 'Other')], default='prov', help_text='Organization type', max_length=50)),
                ('telecom', models.JSONField(blank=True, default=list, help_text='Contact details (phone, email, etc.)')),
                ('address', models.JSONField(blank=True, default=list, help_text='Addresses')),
                ('active', models.BooleanField(default=True, help_text="Whether this organization's record is in active use")),
                ('contact', models.JSONField(blank=True, default=list, help_text='Contact for the organization')),
                ('endpoint', models.JSONField(blank=True, default=list, help_text='Technical endpoints providing access to services')),
            ],
            options={
                'verbose_name': 'FHIR Organization',
                'verbose_name_plural': 'FHIR Organizations',
            },
        ),
        migrations.CreateModel(
            name='FHIRPatient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(help_text='Unique identifier for this resource', max_length=255, unique=True)),
                ('version', models.CharField(default='1', help_text='Version of this resource', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta', models.JSONField(blank=True, default=dict, help_text='Metadata about the resource')),
                ('text', models.JSONField(blank=True, default=dict, help_text='Text summary of the resource')),
                ('contained', models.JSONField(blank=True, default=list, help_text='Contained resources')),
                ('extension', models.JSONField(blank=True, default=list, help_text='Additional content defined by implementations')),
                ('name', models.CharField(help_text="Patient's full name", max_length=255)),
                ('birth_date', models.DateField(blank=True, help_text="Patient's date of birth", null=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('unknown', 'Unknown')], default='unknown', help_text="Patient's gender", max_length=20)),
                ('telecom', models.JSONField(blank=True, default=list, help_text='Contact details (phone, email, etc.)')),
                ('address', models.JSONField(blank=True, default=list, help_text='Addresses')),
                ('marital_status', models.CharField(blank=True, help_text='Marital status', max_length=50)),
                ('communication', models.JSONField(blank=True, default=list, help_text='Languages and preferred language')),
                ('deceased', models.BooleanField(default=False, help_text='If patient is deceased')),
                ('deceased_date', models.DateTimeField(blank=True, help_text='Date of death if applicable', null=True)),
                ('active', models.BooleanField(default=True, help_text="Whether this patient's record is in active use")),
                ('multiple_birth', models.BooleanField(default=False, help_text='Whether patient is part of a multiple birth')),
                ('multiple_birth_integer', models.IntegerField(blank=True, help_text='Order of birth if multiple birth', null=True)),
                ('contact', models.JSONField(blank=True, default=list, help_text='Contact parties (e.g. guardian, family)')),
                ('general_practitioner', models.JSONField(blank=True, default=list, help_text="Patient's nominated care provider")),
                ('managing_organization', models.JSONField(blank=True, default=dict, help_text='Organization that is the custodian of the patient record')),
            ],
            options={
                'verbose_name': 'FHIR Patient',
                'verbose_name_plural': 'FHIR Patients',
            },
        ),
        migrations.CreateModel(
            name='FHIRPractitioner',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(help_text='Unique identifier for this resource', max_length=255, unique=True)),
                ('version', models.CharField(default='1', help_text='Version of this resource', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta', models.JSONField(blank=True, default=dict, help_text='Metadata about the resource')),
                ('text', models.JSONField(blank=True, default=dict, help_text='Text summary of the resource')),
                ('contained', models.JSONField(blank=True, default=list, help_text='Contained resources')),
                ('extension', models.JSONField(blank=True, default=list, help_text='Additional content defined by implementations')),
                ('name', models.CharField(help_text="Practitioner's full name", max_length=255)),
                ('birth_date', models.DateField(blank=True, help_text="Practitioner's date of birth", null=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('unknown', 'Unknown')], default='unknown', help_text="Practitioner's gender", max_length=20)),
                ('telecom', models.JSONField(blank=True, default=list, help_text='Contact details (phone, email, etc.)')),
                ('address', models.JSONField(blank=True, default=list, help_text='Addresses')),
                ('qualification', models.JSONField(blank=True, default=list, help_text='Qualifications, certifications, etc.')),
                ('specialty', models.JSONField(blank=True, default=list, help_text='Specialties')),
                ('active', models.BooleanField(default=True, help_text="Whether this practitioner's record is in active use")),
                ('communication', models.JSONField(blank=True, default=list, help_text='Languages the practitioner can use in patient communication')),
            ],
            options={
                'verbose_name': 'FHIR Practitioner',
                'verbose_name_plural': 'FHIR Practitioners',
            },
        ),
        migrations.CreateModel(
            name='SMARTAuthRequest',
            fields=[
                ('auth_code', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('client_id', models.CharField(max_length=255)),
                ('redirect_uri', models.URLField()),
                ('scope', models.TextField()),
                ('state', models.CharField(max_length=255)),
                ('code_challenge', models.CharField(blank=True, max_length=255, null=True)),
                ('code_challenge_method', models.CharField(blank=True, max_length=50, null=True)),
                ('aud', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SMARTToken',
            fields=[
                ('access_token', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('client_id', models.CharField(max_length=255)),
                ('scope', models.TextField()),
                ('refresh_token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('expires_in', models.IntegerField(default=3600)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]
