# Generated by Django 4.2.7 on 2025-06-02 11:08

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_cryptography.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', django_cryptography.fields.encrypt(models.CharField(max_length=255))),
                ('status', models.CharField(choices=[('active', 'Active'), ('resolved', 'Resolved'), ('remission', 'In Remission'), ('recurrence', 'Recurrence'), ('inactive', 'Inactive')], default='active', max_length=10)),
                ('category', models.CharField(choices=[('general', 'General'), ('rare', 'Rare Condition'), ('chronic', 'Chronic'), ('acute', 'Acute'), ('congenital', 'Congenital')], default='general', max_length=15)),
                ('diagnosed_date', django_cryptography.fields.encrypt(models.DateField(blank=True, null=True))),
                ('resolved_date', django_cryptography.fields.encrypt(models.DateField(blank=True, null=True))),
                ('notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('icd10_code', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=20, null=True))),
                ('is_primary', models.BooleanField(default=False)),
                ('diagnosing_provider', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True))),
                ('is_rare_condition', models.BooleanField(default=False)),
                ('biomarker_status', models.JSONField(blank=True, null=True)),
                ('genetic_information', django_cryptography.fields.encrypt(models.TextField(blank=True, null=True))),
                ('progression_metrics', models.JSONField(blank=True, null=True)),
                ('last_assessment_date', models.DateField(blank=True, null=True)),
                ('fhir_resource_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_conditions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Medical Condition',
                'verbose_name_plural': 'Medical Conditions',
                'ordering': ['-is_primary', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medical_record_number', django_cryptography.fields.encrypt(models.CharField(max_length=50, unique=True))),
                ('date_of_birth', django_cryptography.fields.encrypt(models.DateField())),
                ('gender', django_cryptography.fields.encrypt(models.CharField(max_length=20))),
                ('blood_type', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=10, null=True))),
                ('height', django_cryptography.fields.encrypt(models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True))),
                ('weight', django_cryptography.fields.encrypt(models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True))),
                ('ethnicity', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=50, null=True))),
                ('preferred_language', models.CharField(blank=True, max_length=50, null=True)),
                ('emergency_contact_name', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=100, null=True))),
                ('emergency_contact_phone', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=20, null=True))),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50, null=True)),
                ('has_rare_condition', models.BooleanField(default=False)),
                ('fhir_resource_id', models.CharField(blank=True, max_length=100, null=True)),
                ('fhir_last_updated', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_sharing_authorized', models.BooleanField(default=False)),
                ('research_participation_consent', models.BooleanField(default=False)),
                ('research_consent_date', models.DateTimeField(blank=True, null=True)),
                ('version', models.IntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_medical_records', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to=settings.AUTH_USER_MODEL)),
                ('primary_physician', models.ForeignKey(blank=True, limit_choices_to={'role': 'provider'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_patients', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_medical_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Medical Record',
                'verbose_name_plural': 'Medical Records',
                'ordering': ['-updated_at'],
                'permissions': [('view_phi', 'Can view protected health information'), ('export_records', 'Can export medical records')],
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', django_cryptography.fields.encrypt(models.CharField(max_length=255))),
                ('dosage', django_cryptography.fields.encrypt(models.CharField(max_length=100))),
                ('frequency', django_cryptography.fields.encrypt(models.CharField(max_length=100))),
                ('instructions', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('start_date', django_cryptography.fields.encrypt(models.DateField())),
                ('end_date', django_cryptography.fields.encrypt(models.DateField(blank=True, null=True))),
                ('active', models.BooleanField(default=True)),
                ('reason', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('medication_type', models.CharField(blank=True, max_length=50)),
                ('is_specialty_medication', models.BooleanField(default=False)),
                ('for_rare_condition', models.BooleanField(default=False)),
                ('orphan_drug', models.BooleanField(default=False)),
                ('refill_count', models.IntegerField(default=0)),
                ('refill_until', models.DateField(blank=True, null=True)),
                ('pharmacy_notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('side_effects_reported', models.BooleanField(default=False)),
                ('side_effects_notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('adherence_schedule', models.JSONField(blank=True, null=True)),
                ('last_reminded_at', models.DateTimeField(blank=True, null=True)),
                ('fhir_resource_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='healthcare_created_medications', to=settings.AUTH_USER_MODEL)),
                ('medical_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='healthcare_medications', to='healthcare.medicalrecord')),
                ('prescriber', models.ForeignKey(blank=True, limit_choices_to={'role': 'provider'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='healthcare_prescribed_medications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Medication',
                'verbose_name_plural': 'Medications',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='RareConditionRegistry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('identifier', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField()),
                ('prevalence', models.CharField(blank=True, max_length=100)),
                ('inheritance_pattern', models.CharField(blank=True, max_length=100)),
                ('onset_age', models.CharField(blank=True, max_length=100)),
                ('specialty_category', models.CharField(blank=True, max_length=100)),
                ('known_treatments', models.TextField(blank=True)),
                ('biomarkers', models.TextField(blank=True)),
                ('research_resources', models.TextField(blank=True)),
                ('patient_organizations', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Rare Condition Registry',
                'verbose_name_plural': 'Rare Condition Registry',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WearableIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_type', models.CharField(choices=[('apple_health', 'Apple Health'), ('google_fit', 'Google Fit'), ('fitbit', 'Fitbit'), ('samsung_health', 'Samsung Health'), ('withings', 'Withings'), ('garmin', 'Garmin'), ('whoop', 'Whoop'), ('oura', 'Oura Ring'), ('other', 'Other')], max_length=20)),
                ('device_name', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True))),
                ('device_id', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True))),
                ('status', models.CharField(choices=[('active', 'Active'), ('pending', 'Pending'), ('failed', 'Failed'), ('inactive', 'Inactive')], default='pending', max_length=10)),
                ('integration_details', models.JSONField(blank=True, null=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('access_token', django_cryptography.fields.encrypt(models.TextField(blank=True, null=True))),
                ('refresh_token', django_cryptography.fields.encrypt(models.TextField(blank=True, null=True))),
                ('token_expiry', models.DateTimeField(blank=True, null=True)),
                ('collect_heart_rate', models.BooleanField(default=True)),
                ('collect_steps', models.BooleanField(default=True)),
                ('collect_sleep', models.BooleanField(default=True)),
                ('collect_activity', models.BooleanField(default=True)),
                ('collect_blood_pressure', models.BooleanField(default=False)),
                ('collect_blood_glucose', models.BooleanField(default=False)),
                ('collect_oxygen', models.BooleanField(default=False)),
                ('consent_granted', models.BooleanField(default=False)),
                ('consent_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(limit_choices_to={'role': 'patient'}, on_delete=django.db.models.deletion.CASCADE, related_name='healthcare_wearable_integrations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Wearable Integration',
                'verbose_name_plural': 'Wearable Integrations',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='VitalSign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('measurement_type', models.CharField(choices=[('blood_pressure', 'Blood Pressure'), ('heart_rate', 'Heart Rate'), ('temperature', 'Temperature'), ('respiratory_rate', 'Respiratory Rate'), ('oxygen_saturation', 'Oxygen Saturation'), ('weight', 'Weight'), ('height', 'Height'), ('bmi', 'Body Mass Index'), ('pain', 'Pain Level'), ('glucose', 'Blood Glucose'), ('steps', 'Steps Count'), ('sleep', 'Sleep Duration'), ('activity', 'Activity Level')], max_length=50)),
                ('value', django_cryptography.fields.encrypt(models.CharField(max_length=100))),
                ('unit', models.CharField(blank=True, max_length=50)),
                ('measured_at', models.DateTimeField()),
                ('source', models.CharField(blank=True, max_length=100)),
                ('source_device_id', models.CharField(blank=True, max_length=255)),
                ('notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('blood_pressure', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=20))),
                ('heart_rate', django_cryptography.fields.encrypt(models.IntegerField(blank=True, null=True))),
                ('temperature', django_cryptography.fields.encrypt(models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True))),
                ('respiratory_rate', django_cryptography.fields.encrypt(models.IntegerField(blank=True, null=True))),
                ('oxygen_saturation', django_cryptography.fields.encrypt(models.IntegerField(blank=True, null=True))),
                ('is_abnormal', models.BooleanField(default=False)),
                ('context', models.CharField(blank=True, max_length=100)),
                ('fhir_resource_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_vital_signs', to=settings.AUTH_USER_MODEL)),
                ('medical_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vital_signs', to='healthcare.medicalrecord')),
                ('related_to_condition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='condition_vitals', to='healthcare.condition')),
            ],
            options={
                'ordering': ['-measured_at'],
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', django_cryptography.fields.encrypt(models.CharField(max_length=255))),
                ('treatment_type', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planned', max_length=15)),
                ('start_date', django_cryptography.fields.encrypt(models.DateField())),
                ('end_date', django_cryptography.fields.encrypt(models.DateField(blank=True, null=True))),
                ('location', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255))),
                ('notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('reason', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('outcome', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('complications', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('for_rare_condition', models.BooleanField(default=False)),
                ('is_experimental', models.BooleanField(default=False)),
                ('part_of_clinical_trial', models.BooleanField(default=False)),
                ('clinical_trial_id', models.CharField(blank=True, max_length=100, null=True)),
                ('fhir_resource_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_treatments', to=settings.AUTH_USER_MODEL)),
                ('medical_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatments', to='healthcare.medicalrecord')),
                ('provider', models.ForeignKey(blank=True, limit_choices_to={'role': 'provider'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='provided_treatments', to=settings.AUTH_USER_MODEL)),
                ('related_condition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='condition_treatments', to='healthcare.condition')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Symptom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', django_cryptography.fields.encrypt(models.CharField(max_length=255))),
                ('description', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('first_observed', django_cryptography.fields.encrypt(models.DateField())),
                ('last_observed', django_cryptography.fields.encrypt(models.DateField(blank=True, null=True))),
                ('is_active', models.BooleanField(default=True)),
                ('severity', models.IntegerField(default=1, help_text='Scale of 1-10')),
                ('frequency', models.CharField(blank=True, max_length=50)),
                ('duration', models.CharField(blank=True, max_length=50)),
                ('impact_daily_life', models.IntegerField(default=1, help_text='Scale of 1-10')),
                ('impact_notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='symptoms', to='healthcare.condition')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_symptoms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-severity', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ReferralNetwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialty', models.CharField(max_length=255)),
                ('rare_conditions_specialty', models.BooleanField(default=False)),
                ('years_experience', models.IntegerField(default=0)),
                ('location', models.CharField(max_length=255)),
                ('accepting_patients', models.BooleanField(default=True)),
                ('telemedicine_available', models.BooleanField(default=False)),
                ('insurance_accepted', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(limit_choices_to={'role': 'provider'}, on_delete=django.db.models.deletion.CASCADE, related_name='referral_specialties', to=settings.AUTH_USER_MODEL)),
                ('specific_conditions', models.ManyToManyField(blank=True, related_name='specialist_providers', to='healthcare.rareconditionregistry')),
            ],
            options={
                'verbose_name': 'Referral Network Entry',
                'verbose_name_plural': 'Referral Network',
                'ordering': ['specialty', '-years_experience'],
            },
        ),
        migrations.CreateModel(
            name='MedicationIntake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taken_at', models.DateTimeField()),
                ('dosage_taken', models.CharField(max_length=100)),
                ('skipped', models.BooleanField(default=False)),
                ('skip_reason', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('recorded_via', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intakes', to='healthcare.medication')),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-taken_at'],
            },
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', django_cryptography.fields.encrypt(models.CharField(max_length=255))),
                ('status', models.CharField(choices=[('ordered', 'Ordered'), ('pending', 'Pending'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='ordered', max_length=10)),
                ('ordered_date', django_cryptography.fields.encrypt(models.DateField())),
                ('completed_date', django_cryptography.fields.encrypt(models.DateField(blank=True, null=True))),
                ('notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('lab_location', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255))),
                ('test_type', models.CharField(blank=True, max_length=100)),
                ('fasting_required', models.BooleanField(default=False)),
                ('priority', models.CharField(blank=True, max_length=20)),
                ('for_rare_condition_monitoring', models.BooleanField(default=False)),
                ('fhir_resource_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_lab_tests', to=settings.AUTH_USER_MODEL)),
                ('medical_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_tests', to='healthcare.medicalrecord')),
                ('ordered_by', models.ForeignKey(blank=True, limit_choices_to={'role': 'provider'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ordered_lab_tests', to=settings.AUTH_USER_MODEL)),
                ('related_condition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_lab_tests', to='healthcare.condition')),
            ],
            options={
                'ordering': ['-ordered_date'],
            },
        ),
        migrations.CreateModel(
            name='LabResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_name', django_cryptography.fields.encrypt(models.CharField(max_length=255))),
                ('value', django_cryptography.fields.encrypt(models.CharField(max_length=100))),
                ('unit', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=50))),
                ('reference_range', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=100))),
                ('is_abnormal', models.BooleanField(default=False)),
                ('notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('result_date', models.DateTimeField(auto_now_add=True)),
                ('interpretation', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('biomarker_significance', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('fhir_resource_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_lab_results', to=settings.AUTH_USER_MODEL)),
                ('interpreted_by', models.ForeignKey(blank=True, limit_choices_to={'role': 'provider'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='interpreted_lab_results', to=settings.AUTH_USER_MODEL)),
                ('lab_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='healthcare.labtest')),
            ],
            options={
                'ordering': ['-result_date'],
            },
        ),
        migrations.CreateModel(
            name='Immunization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vaccine', django_cryptography.fields.encrypt(models.CharField(max_length=255))),
                ('date_administered', django_cryptography.fields.encrypt(models.DateField())),
                ('administered_by', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255))),
                ('lot_number', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=100))),
                ('notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('manufacturer', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=100))),
                ('dose_number', models.IntegerField(blank=True, null=True)),
                ('series_doses', models.IntegerField(blank=True, null=True)),
                ('route', models.CharField(blank=True, max_length=50)),
                ('site', models.CharField(blank=True, max_length=50)),
                ('fhir_resource_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_immunizations', to=settings.AUTH_USER_MODEL)),
                ('medical_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='immunizations', to='healthcare.medicalrecord')),
            ],
            options={
                'ordering': ['-date_administered'],
            },
        ),
        migrations.CreateModel(
            name='HealthDataAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('view', 'View'), ('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('export', 'Export'), ('import', 'Import'), ('share', 'Share')], max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('resource_type', models.CharField(max_length=50)),
                ('resource_id', models.CharField(max_length=50)),
                ('patient_id', models.CharField(max_length=50)),
                ('access_reason', models.CharField(blank=True, max_length=255)),
                ('details', models.TextField(blank=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='health_data_access_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Health Data Audit Log',
                'verbose_name_plural': 'Health Data Audit Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='FamilyHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship', models.CharField(choices=[('mother', 'Mother'), ('father', 'Father'), ('sister', 'Sister'), ('brother', 'Brother'), ('daughter', 'Daughter'), ('son', 'Son'), ('grandmother_maternal', 'Maternal Grandmother'), ('grandfather_maternal', 'Maternal Grandfather'), ('grandmother_paternal', 'Paternal Grandmother'), ('grandfather_paternal', 'Paternal Grandfather'), ('aunt_maternal', 'Maternal Aunt'), ('uncle_maternal', 'Maternal Uncle'), ('aunt_paternal', 'Paternal Aunt'), ('uncle_paternal', 'Paternal Uncle'), ('cousin', 'Cousin'), ('other', 'Other')], max_length=25)),
                ('condition', django_cryptography.fields.encrypt(models.CharField(max_length=255))),
                ('diagnosed_age', django_cryptography.fields.encrypt(models.IntegerField(blank=True, null=True))),
                ('notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('is_deceased', models.BooleanField(default=False)),
                ('deceased_age', django_cryptography.fields.encrypt(models.IntegerField(blank=True, null=True))),
                ('deceased_reason', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255))),
                ('is_rare_condition', models.BooleanField(default=False)),
                ('fhir_resource_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_family_history', to=settings.AUTH_USER_MODEL)),
                ('medical_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='family_history', to='healthcare.medicalrecord')),
                ('rare_condition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='family_history_entries', to='healthcare.rareconditionregistry')),
            ],
            options={
                'verbose_name': 'Family History',
                'verbose_name_plural': 'Family History',
                'ordering': ['relationship'],
            },
        ),
        migrations.CreateModel(
            name='EHRIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('integration_type', models.CharField(choices=[('epic', 'Epic'), ('cerner', 'Cerner'), ('allscripts', 'Allscripts'), ('meditech', 'Meditech'), ('athenahealth', 'Athenahealth'), ('nextgen', 'NextGen'), ('eclinicalworks', 'eClinicalWorks'), ('other', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('pending', 'Pending'), ('failed', 'Failed'), ('inactive', 'Inactive')], default='pending', max_length=10)),
                ('external_id', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True))),
                ('integration_details', models.JSONField(blank=True, null=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('access_token', django_cryptography.fields.encrypt(models.TextField(blank=True, null=True))),
                ('refresh_token', django_cryptography.fields.encrypt(models.TextField(blank=True, null=True))),
                ('token_expiry', models.DateTimeField(blank=True, null=True)),
                ('consent_granted', models.BooleanField(default=False)),
                ('consent_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_ehr_integrations', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(limit_choices_to={'role': 'patient'}, on_delete=django.db.models.deletion.CASCADE, related_name='ehr_integrations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'EHR Integration',
                'verbose_name_plural': 'EHR Integrations',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ConditionFlare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('onset_date', django_cryptography.fields.encrypt(models.DateField())),
                ('resolved_date', django_cryptography.fields.encrypt(models.DateField(blank=True, null=True))),
                ('symptoms', django_cryptography.fields.encrypt(models.TextField())),
                ('severity', models.IntegerField(help_text='Scale of 1-10')),
                ('hospitalized', models.BooleanField(default=False)),
                ('treatment', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flares', to='healthcare.condition')),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-onset_date'],
            },
        ),
        migrations.AddField(
            model_name='condition',
            name='medical_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='healthcare.medicalrecord'),
        ),
        migrations.AddField(
            model_name='condition',
            name='rare_condition',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patient_conditions', to='healthcare.rareconditionregistry'),
        ),
        migrations.CreateModel(
            name='Allergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agent', django_cryptography.fields.encrypt(models.CharField(max_length=255))),
                ('reaction', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('severity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('life_threatening', 'Life-threatening')], default='moderate', max_length=20)),
                ('diagnosed_date', django_cryptography.fields.encrypt(models.DateField(blank=True, null=True))),
                ('allergy_type', models.CharField(blank=True, max_length=50)),
                ('verification_status', models.CharField(blank=True, max_length=50)),
                ('last_occurrence', django_cryptography.fields.encrypt(models.DateField(blank=True, null=True))),
                ('treatment_notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('fhir_resource_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_allergies', to=settings.AUTH_USER_MODEL)),
                ('medical_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allergies', to='healthcare.medicalrecord')),
            ],
            options={
                'verbose_name': 'Allergy',
                'verbose_name_plural': 'Allergies',
                'ordering': ['-severity', 'agent'],
            },
        ),
        migrations.CreateModel(
            name='HealthDataConsent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consent_type', models.CharField(choices=[('provider_access', 'Healthcare Provider Access'), ('research', 'Research Use'), ('caregiver_access', 'Caregiver Access'), ('data_sharing', 'Data Sharing with Third Parties'), ('medication_tracking', 'Medication Adherence Tracking'), ('vitals_monitoring', 'Vitals Monitoring'), ('wearable_integration', 'Wearable Device Integration')], max_length=25)),
                ('consented', models.BooleanField(default=False)),
                ('consented_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('authorized_entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='authorized_health_data', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(limit_choices_to={'role': 'patient'}, on_delete=django.db.models.deletion.CASCADE, related_name='health_data_consents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-consented_at'],
                'unique_together': {('patient', 'consent_type', 'authorized_entity')},
            },
        ),
    ]
