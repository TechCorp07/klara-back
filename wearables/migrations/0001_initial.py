# Generated by Django 4.2.7 on 2025-07-18 10:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import healthcare.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='WithingsProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('withings_user_id', models.CharField(max_length=255)),
                ('access_token', models.CharField(max_length=255)),
                ('refresh_token', models.CharField(max_length=255)),
                ('token_expiry', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='withings_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WithingsMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('measurement_type', models.CharField(choices=[('weight', 'Weight'), ('height', 'Height'), ('fat_mass', 'Fat Mass'), ('heart_rate', 'Heart Rate'), ('blood_pressure', 'Blood Pressure'), ('sleep', 'Sleep'), ('steps', 'Steps'), ('temperature', 'Temperature')], max_length=20)),
                ('value', models.FloatField()),
                ('unit', models.CharField(max_length=20)),
                ('measured_at', models.DateTimeField()),
                ('withings_device_id', models.CharField(blank=True, max_length=255)),
                ('withings_measurement_id', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='withings_measurements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-measured_at'],
            },
        ),
        migrations.CreateModel(
            name='WearableIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('integration_type', models.CharField(choices=[('withings', 'Withings'), ('apple_health', 'Apple Health'), ('google_fit', 'Google Fit'), ('samsung_health', 'Samsung Health'), ('fitbit', 'Fitbit'), ('garmin', 'Garmin'), ('oura', 'Oura Ring'), ('whoop', 'Whoop'), ('other', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('connected', 'Connected'), ('disconnected', 'Disconnected'), ('expired', 'Token Expired'), ('error', 'Connection Error'), ('pending', 'Connection Pending')], default='disconnected', max_length=20)),
                ('access_token', healthcare.fields.EncryptedTextField(blank=True, null=True)),
                ('refresh_token', healthcare.fields.EncryptedTextField(blank=True, null=True)),
                ('token_expiry', models.DateTimeField(blank=True, null=True)),
                ('platform_user_id', healthcare.fields.EncryptedCharField(blank=True, null=True)),
                ('consent_granted', models.BooleanField(default=False)),
                ('consent_date', models.DateTimeField(blank=True, null=True)),
                ('collect_steps', models.BooleanField(default=True)),
                ('collect_heart_rate', models.BooleanField(default=True)),
                ('collect_weight', models.BooleanField(default=True)),
                ('collect_sleep', models.BooleanField(default=True)),
                ('collect_blood_pressure', models.BooleanField(default=True)),
                ('collect_oxygen', models.BooleanField(default=True)),
                ('collect_blood_glucose', models.BooleanField(default=True)),
                ('collect_activity', models.BooleanField(default=True)),
                ('collect_temperature', models.BooleanField(default=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_frequency', models.IntegerField(default=24, help_text='Hours between automatic syncs')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('settings', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wearables_integrations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Wearable Integration',
                'verbose_name_plural': 'Wearable Integrations',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='SyncLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('integration_type', models.CharField(choices=[('withings', 'Withings'), ('apple_health', 'Apple Health'), ('google_fit', 'Google Fit'), ('samsung_health', 'Samsung Health'), ('fitbit', 'Fitbit'), ('garmin', 'Garmin'), ('oura', 'Oura Ring'), ('whoop', 'Whoop'), ('other', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('success', 'Success'), ('partial', 'Partial Success'), ('failed', 'Failed'), ('skipped', 'Skipped')], max_length=10)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('measurements_synced', models.IntegerField(default=0)),
                ('data_start_date', models.DateTimeField(blank=True, null=True)),
                ('data_end_date', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wearable_sync_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='PharmaceuticalDataExport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_types', models.JSONField(default=list, help_text='Types of data to export')),
                ('date_range_start', models.DateTimeField()),
                ('date_range_end', models.DateTimeField()),
                ('medication_protocols', models.JSONField(default=list, help_text='Specific protocols to include')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('records_exported', models.PositiveIntegerField(default=0)),
                ('file_path', models.CharField(blank=True, max_length=500)),
                ('file_size', models.PositiveIntegerField(default=0, help_text='File size in bytes')),
                ('anonymized', models.BooleanField(default=True)),
                ('consent_verified', models.BooleanField(default=False)),
                ('audit_trail', models.JSONField(default=dict)),
                ('patients', models.ManyToManyField(limit_choices_to={'role': 'patient'}, related_name='wearable_exports', to=settings.AUTH_USER_MODEL)),
                ('pharmaceutical_company', models.ForeignKey(limit_choices_to={'role': 'pharmco'}, on_delete=django.db.models.deletion.CASCADE, related_name='wearable_data_exports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationDelivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('medication_reminder', 'Medication Reminder'), ('appointment_reminder', 'Appointment Reminder'), ('vitals_request', 'Vitals Data Request'), ('protocol_update', 'Protocol Update'), ('emergency_alert', 'Emergency Alert')], max_length=30)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('success', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField()),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('user_response', models.CharField(blank=True, help_text='taken, skipped, snoozed, etc.', max_length=50)),
                ('response_time', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Platform-specific delivery data')),
                ('medication_id', models.CharField(blank=True, help_text='Related medication ID', max_length=100)),
                ('appointment_id', models.CharField(blank=True, help_text='Related appointment ID', max_length=100)),
                ('integration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='wearables.wearableintegration')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wearable_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='WearableMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('integration_type', models.CharField(choices=[('withings', 'Withings'), ('apple_health', 'Apple Health'), ('google_fit', 'Google Fit'), ('samsung_health', 'Samsung Health'), ('fitbit', 'Fitbit'), ('garmin', 'Garmin'), ('oura', 'Oura Ring'), ('whoop', 'Whoop'), ('other', 'Other')], max_length=20)),
                ('measurement_type', models.CharField(choices=[('weight', 'Weight'), ('height', 'Height'), ('body_fat', 'Body Fat'), ('heart_rate', 'Heart Rate'), ('blood_pressure', 'Blood Pressure'), ('sleep', 'Sleep'), ('steps', 'Steps'), ('distance', 'Distance'), ('calories', 'Calories'), ('active_minutes', 'Active Minutes'), ('temperature', 'Temperature'), ('oxygen_saturation', 'Oxygen Saturation'), ('blood_glucose', 'Blood Glucose'), ('respiratory_rate', 'Respiratory Rate'), ('stress', 'Stress Level'), ('activity', 'Activity')], max_length=20)),
                ('value', models.FloatField()),
                ('unit', models.CharField(max_length=20)),
                ('measured_at', models.DateTimeField()),
                ('device_id', healthcare.fields.EncryptedCharField(blank=True)),
                ('device_model', healthcare.fields.EncryptedCharField(blank=True)),
                ('external_measurement_id', healthcare.fields.EncryptedCharField(blank=True)),
                ('additional_data', models.JSONField(blank=True, default=dict)),
                ('synced_to_healthcare', models.BooleanField(default=False)),
                ('healthcare_record_id', models.CharField(blank=True, max_length=255, null=True)),
                ('systolic', models.FloatField(blank=True, null=True)),
                ('diastolic', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wearable_measurements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Wearable Measurement',
                'verbose_name_plural': 'Wearable Measurements',
                'ordering': ['-measured_at'],
                'indexes': [models.Index(fields=['user', 'measurement_type', 'measured_at'], name='wearables_w_user_id_a0516f_idx'), models.Index(fields=['integration_type', 'external_measurement_id'], name='wearables_w_integra_871e55_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='wearablemeasurement',
            constraint=models.UniqueConstraint(fields=('integration_type', 'external_measurement_id'), name='unique_external_measurement'),
        ),
        migrations.AlterUniqueTogether(
            name='wearableintegration',
            unique_together={('user', 'integration_type')},
        ),
        migrations.AddIndex(
            model_name='notificationdelivery',
            index=models.Index(fields=['user', 'notification_type', 'sent_at'], name='wearables_n_user_id_96bd9f_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationdelivery',
            index=models.Index(fields=['integration', 'success'], name='wearables_n_integra_d77d77_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationdelivery',
            index=models.Index(fields=['medication_id', 'sent_at'], name='wearables_n_medicat_6c75f7_idx'),
        ),
    ]
