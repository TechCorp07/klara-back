# Generated by Django 4.2.7 on 2025-07-18 10:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import healthcare.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('layout', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_public', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboards', to=settings.AUTH_USER_MODEL)),
                ('shared_with', models.ManyToManyField(blank=True, related_name='shared_dashboards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('results_json', healthcare.fields.EncryptedJSONField(blank=True, null=True)),
                ('file_path', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('accessed_count', models.IntegerField(default=0)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReportConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('report_type', models.CharField(choices=[('patient_adherence', 'Patient Medication Adherence'), ('patient_vitals', 'Patient Vitals Trends'), ('provider_performance', 'Provider Performance'), ('population_health', 'Population Health Metrics'), ('medication_efficacy', 'Medication Efficacy'), ('phi_access', 'PHI Access Audit'), ('consent_activity', 'Consent Activity'), ('telemedicine_usage', 'Telemedicine Usage'), ('rare_disease_adherence', 'Rare Disease Medication Adherence'), ('pharmaceutical_trial', 'Pharmaceutical Trial Data'), ('wearable_analytics', 'Wearable Device Analytics'), ('caregiver_effectiveness', 'Caregiver Effectiveness'), ('community_engagement', 'Community Engagement'), ('telemedicine_outcomes', 'Telemedicine Outcomes'), ('regulatory_submission', 'Regulatory Submission'), ('real_world_evidence', 'Real World Evidence'), ('genetic_correlation', 'Genetic Data Correlation'), ('emergency_events', 'Emergency Events Analysis'), ('custom', 'Custom Report')], default='patient_adherence', max_length=50)),
                ('parameters', models.JSONField(blank=True, default=dict)),
                ('schedule', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annual', 'Annual'), ('once', 'One-time'), ('on_demand', 'On-demand')], default='on_demand', max_length=20)),
                ('last_run', models.DateTimeField(blank=True, null=True)),
                ('next_run', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_public', models.BooleanField(default=False)),
                ('allowed_roles', models.JSONField(blank=True, default=list)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_reports', to=settings.AUTH_USER_MODEL)),
                ('recipients', models.ManyToManyField(blank=True, related_name='subscribed_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Report Configuration',
                'verbose_name_plural': 'Report Configurations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReportScheduleLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_time', models.DateTimeField()),
                ('execution_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('configuration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule_logs', to='reports.reportconfiguration')),
                ('report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='schedule_log', to='reports.report')),
            ],
            options={
                'ordering': ['-scheduled_time'],
            },
        ),
        migrations.AddField(
            model_name='report',
            name='configuration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='reports.reportconfiguration'),
        ),
        migrations.AddField(
            model_name='report',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_reports', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DataExport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('export_date', models.DateTimeField(auto_now_add=True)),
                ('export_format', models.CharField(choices=[('csv', 'CSV'), ('excel', 'Excel'), ('json', 'JSON'), ('pdf', 'PDF')], default='csv', max_length=10)),
                ('data_type', models.CharField(max_length=100)),
                ('parameters', models.JSONField(default=dict)),
                ('record_count', models.IntegerField(default=0)),
                ('export_reason', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('file_size', models.IntegerField(default=0)),
                ('file_path', models.CharField(blank=True, max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_exports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Data Export',
                'verbose_name_plural': 'Data Exports',
                'ordering': ['-export_date'],
            },
        ),
        migrations.CreateModel(
            name='DashboardWidget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('widget_type', models.CharField(choices=[('line_chart', 'Line Chart'), ('bar_chart', 'Bar Chart'), ('pie_chart', 'Pie Chart'), ('table', 'Data Table'), ('metric', 'Single Metric'), ('heatmap', 'Heat Map'), ('scatter', 'Scatter Plot'), ('custom', 'Custom Widget')], default='line_chart', max_length=20)),
                ('data_source', models.CharField(max_length=255)),
                ('configuration', models.JSONField(default=dict)),
                ('position', models.JSONField(default=dict)),
                ('refresh_interval', models.IntegerField(default=0)),
                ('last_refresh', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='widgets', to='reports.dashboard')),
            ],
            options={
                'ordering': ['dashboard', 'position'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('calculation_method', models.TextField()),
                ('units', models.CharField(blank=True, max_length=50)),
                ('data_source', models.CharField(max_length=255)),
                ('parameters', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
    ]
