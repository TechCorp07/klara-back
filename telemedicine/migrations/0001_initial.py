# Generated by Django 4.2.7 on 2025-06-02 11:08

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_cryptography.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('healthcare', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('duration_minutes', models.IntegerField(default=30, help_text='Appointment duration in minutes')),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('status', models.CharField(choices=[('requested', 'Requested'), ('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('checked_in', 'Checked In'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='requested', max_length=20)),
                ('appointment_type', models.CharField(choices=[('video_consultation', 'Video Consultation'), ('phone_consultation', 'Phone Consultation'), ('in_person', 'In-Person Visit'), ('follow_up', 'Follow-up Visit'), ('initial_consultation', 'Initial Consultation')], default='video_consultation', max_length=25)),
                ('priority', models.CharField(choices=[('routine', 'Routine'), ('urgent', 'Urgent'), ('emergency', 'Emergency')], default='routine', max_length=10)),
                ('reason', django_cryptography.fields.encrypt(models.TextField(help_text='Reason for the appointment - PHI data'))),
                ('notes', django_cryptography.fields.encrypt(models.TextField(blank=True, help_text='Provider notes - PHI data'))),
                ('encrypted_metadata', django_cryptography.fields.encrypt(models.JSONField(blank=True, default=dict, help_text='Additional encrypted PHI data'))),
                ('reminders_enabled', models.BooleanField(default=True)),
                ('reminder_sent', models.BooleanField(default=False)),
                ('reminder_sent_time', models.DateTimeField(blank=True, null=True)),
                ('insurance_verified', models.BooleanField(default=False)),
                ('copay_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('copay_collected', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-scheduled_time'],
                'permissions': [('can_view_all_appointments', 'Can view all appointments'), ('can_manage_appointments', 'Can manage appointments')],
            },
        ),
        migrations.CreateModel(
            name='Consultation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('ready', 'Ready'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('technical_issues', 'Technical Issues')], default='scheduled', max_length=20)),
                ('platform', models.CharField(choices=[('zoom', 'Zoom'), ('teams', 'Microsoft Teams'), ('webex', 'Cisco Webex'), ('custom', 'Custom Platform')], default='zoom', max_length=20)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('patient_join_time', models.DateTimeField(blank=True, null=True)),
                ('provider_join_time', models.DateTimeField(blank=True, null=True)),
                ('notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('diagnosis', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('treatment_plan', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('vital_signs', django_cryptography.fields.encrypt(models.JSONField(blank=True, default=dict))),
                ('meeting_id', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255))),
                ('join_url', django_cryptography.fields.encrypt(models.URLField(blank=True))),
                ('password', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=100))),
                ('host_key', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=100))),
                ('platform_data', django_cryptography.fields.encrypt(models.JSONField(blank=True, default=dict))),
                ('recording_enabled', models.BooleanField(default=False)),
                ('recording_url', django_cryptography.fields.encrypt(models.URLField(blank=True))),
                ('recording_consent', models.BooleanField(default=False)),
                ('technical_issues', models.TextField(blank=True)),
                ('connection_quality', models.IntegerField(blank=True, help_text='Connection quality (1-5)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consultations', to='telemedicine.appointment')),
                ('treatments', models.ManyToManyField(blank=True, related_name='consultations', to='healthcare.treatment')),
            ],
            options={
                'ordering': ['-created_at'],
                'permissions': [('can_start_consultations', 'Can start consultations'), ('can_join_consultations', 'Can join consultations')],
            },
        ),
        migrations.CreateModel(
            name='WaitingRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('estimated_wait_time', models.IntegerField(default=0, help_text='Estimated wait time in minutes')),
                ('custom_message', models.TextField(blank=True, help_text='Custom message for patients in waiting room')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waiting_rooms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['provider', 'name'],
            },
        ),
        migrations.CreateModel(
            name='WaitingRoomPatient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('waiting', 'Waiting'), ('ready', 'Ready for Consultation'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='waiting', max_length=20)),
                ('checked_in_time', models.DateTimeField(auto_now_add=True)),
                ('ready_time', models.DateTimeField(blank=True, help_text='Time when provider marked patient as ready', null=True)),
                ('notes', models.TextField(blank=True)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waiting_room_entries', to='telemedicine.appointment')),
                ('waiting_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients', to='telemedicine.waitingroom')),
            ],
            options={
                'ordering': ['checked_in_time'],
            },
        ),
        migrations.CreateModel(
            name='ProviderAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('recurrence_pattern', models.CharField(blank=True, help_text='iCal RRULE format for recurring availability', max_length=255)),
                ('appointment_types', models.JSONField(default=list, help_text='List of appointment types available during this slot')),
                ('slot_duration_minutes', models.IntegerField(default=15, help_text='Minimum appointment slot duration')),
                ('max_appointments', models.IntegerField(default=1, help_text='Maximum number of appointments per slot')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Provider Availability',
                'verbose_name_plural': 'Provider Availabilities',
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prescription_type', models.CharField(choices=[('medication', 'Medication'), ('equipment', 'Medical Equipment'), ('procedure', 'Procedure'), ('therapy', 'Therapy')], default='medication', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending'), ('active', 'Active'), ('filled', 'Filled'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('expired', 'Expired'), ('denied', 'Denied')], default='draft', max_length=20)),
                ('medication_name', django_cryptography.fields.encrypt(models.CharField(max_length=255))),
                ('dosage', django_cryptography.fields.encrypt(models.CharField(max_length=100))),
                ('frequency', django_cryptography.fields.encrypt(models.CharField(max_length=100))),
                ('duration', django_cryptography.fields.encrypt(models.CharField(max_length=100))),
                ('quantity', django_cryptography.fields.encrypt(models.CharField(max_length=100))),
                ('refills', models.IntegerField(default=0)),
                ('instructions', django_cryptography.fields.encrypt(models.TextField())),
                ('prescribed_date', models.DateField(auto_now_add=True)),
                ('prescribed_time', models.DateTimeField(auto_now_add=True)),
                ('fill_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('pharmacy_notes', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('pharmacy_id', models.CharField(blank=True, max_length=100)),
                ('external_rx_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('patient_notified', models.BooleanField(default=False)),
                ('patient_notification_time', models.DateTimeField(blank=True, null=True)),
                ('is_electronically_sent', models.BooleanField(default=False)),
                ('sent_timestamp', models.DateTimeField(blank=True, null=True)),
                ('send_method', models.CharField(blank=True, max_length=50)),
                ('electronic_rx_reference', models.CharField(blank=True, max_length=255)),
                ('ndc_code', models.CharField(blank=True, help_text='National Drug Code', max_length=50)),
                ('generic_allowed', models.BooleanField(default=True)),
                ('prior_authorization_required', models.BooleanField(default=False)),
                ('drug_interaction_checked', models.BooleanField(default=False)),
                ('drug_allergy_checked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('consultation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prescriptions', to='telemedicine.consultation')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_prescriptions', to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='telemedicine_provider_prescriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-prescribed_time'],
                'permissions': [('can_prescribe', 'Can create prescriptions'), ('can_view_all_prescriptions', 'Can view all prescriptions')],
            },
        ),
        migrations.CreateModel(
            name='ConsultationNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subjective', django_cryptography.fields.encrypt(models.TextField(blank=True, help_text="Patient's subjective experience"))),
                ('objective', django_cryptography.fields.encrypt(models.TextField(blank=True, help_text='Objective observations'))),
                ('assessment', django_cryptography.fields.encrypt(models.TextField(blank=True, help_text="Provider's assessment"))),
                ('plan', django_cryptography.fields.encrypt(models.TextField(blank=True, help_text='Treatment plan'))),
                ('chief_complaint', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('history_present_illness', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('past_medical_history', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('medications', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('allergies', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('review_of_systems', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('physical_examination', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('diagnostic_results', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('vital_signs', django_cryptography.fields.encrypt(models.JSONField(blank=True, default=dict))),
                ('is_complete', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('template_used', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('consultation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detailed_notes', to='telemedicine.consultation')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authored_notes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='availability_block',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointments', to='telemedicine.provideravailability'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_appointments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='appointment',
            name='medical_record',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointments', to='healthcare.medicalrecord'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_appointments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='appointment',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provider_appointments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='appointment',
            name='related_condition',
            field=models.ForeignKey(blank=True, help_text='Specific condition this appointment is related to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointments', to='healthcare.condition'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_appointments', to=settings.AUTH_USER_MODEL),
        ),
    ]
