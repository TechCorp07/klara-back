# Generated by Django 4.2.7 on 2025-07-18 10:33

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import healthcare.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('role', models.CharField(choices=[('patient', 'Patient'), ('provider', 'Healthcare Provider'), ('pharmco', 'Pharmaceutical Company'), ('admin', 'Administrator'), ('superuser', 'Super Administrator'), ('caregiver', 'Caregiver'), ('researcher', 'Researcher'), ('compliance', 'Compliance Officer')], default='patient', max_length=10)),
                ('profile_image', models.ImageField(blank=True, help_text='User profile image', null=True, upload_to='profile_images/')),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('login_attempts', models.IntegerField(default=0)),
                ('account_locked', models.BooleanField(default=False)),
                ('account_locked_time', models.DateTimeField(blank=True, null=True)),
                ('password_last_changed', models.DateTimeField(blank=True, null=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('failed_login_attempts', models.IntegerField(default=0)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('security_questions_set', models.BooleanField(default=False)),
                ('terms_accepted', models.BooleanField(default=False)),
                ('hipaa_privacy_acknowledged', models.BooleanField(default=False)),
                ('hipaa_privacy_acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('data_sharing_consent', models.BooleanField(default=False)),
                ('caregiver_authorization_acknowledged', models.BooleanField(default=False)),
                ('phi_handling_acknowledged', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=False)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('email_verification_token', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, null=True)),
                ('email_verification_sent_at', models.DateTimeField(blank=True, null=True)),
                ('reset_password_token', models.UUIDField(blank=True, null=True)),
                ('reset_password_token_created_at', models.DateTimeField(blank=True, null=True)),
                ('jwt_secret_version', models.IntegerField(default=1, help_text='Version for JWT secret rotation')),
                ('last_token_refresh', models.DateTimeField(blank=True, null=True)),
                ('research_participant_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('research_enrollment_date', models.DateTimeField(blank=True, null=True)),
                ('profile_created', models.BooleanField(default=False)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PharmaceuticalTenant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('regulatory_id', models.CharField(help_text='FDA or regulatory body ID', max_length=100, unique=True)),
                ('contact_email', models.EmailField(max_length=254)),
                ('primary_therapeutic_areas', models.JSONField(default=list, help_text='List of therapeutic focus areas')),
                ('is_active', models.BooleanField(default=True)),
                ('features_enabled', models.JSONField(default=dict, help_text='Tenant-specific feature flags')),
                ('branding_config', models.JSONField(default=dict, help_text='Custom branding and UI configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_audit_date', models.DateTimeField(blank=True, null=True)),
                ('compliance_status', models.CharField(choices=[('ACTIVE', 'Active'), ('UNDER_REVIEW', 'Under Review'), ('SUSPENDED', 'Suspended'), ('TERMINATED', 'Terminated')], default='ACTIVE', max_length=20)),
            ],
            options={
                'verbose_name': 'Pharmaceutical Tenant',
                'verbose_name_plural': 'Pharmaceutical Tenants',
                'db_table': 'pharmaceutical_tenants',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('session_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('device_fingerprint', models.CharField(blank=True, max_length=255, null=True)),
                ('patient_context', models.TextField(blank=True, help_text='Encrypted patient workflow context', null=True)),
                ('clinical_context', models.TextField(blank=True, help_text='Encrypted clinical workflow state', null=True)),
                ('research_context', models.TextField(blank=True, help_text='Encrypted research session context', null=True)),
                ('is_emergency_session', models.BooleanField(default=False)),
                ('emergency_reason', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_emergency_sessions', to=settings.AUTH_USER_MODEL)),
                ('pharmaceutical_tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.pharmaceuticaltenant')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='active_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_sessions',
            },
        ),
        migrations.CreateModel(
            name='TwoFactorDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secret_key', models.CharField(max_length=255)),
                ('confirmed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='two_factor_device', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TemporaryRegistrationData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='temp_registration_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Temporary Registration Data',
                'verbose_name_plural': 'Temporary Registration Data',
            },
        ),
        migrations.CreateModel(
            name='ResearcherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution_name', models.CharField(max_length=255)),
                ('institution_type', models.CharField(choices=[('ACADEMIC', 'Academic Researcher'), ('CLINICAL', 'Clinical Researcher'), ('INDUSTRY', 'Industry Researcher'), ('GOVERNMENT', 'Government Researcher'), ('NON_PROFIT', 'Non-Profit Researcher')], max_length=20)),
                ('department', models.CharField(blank=True, max_length=255)),
                ('research_id', models.CharField(max_length=100, unique=True)),
                ('primary_research_area', models.CharField(choices=[('RARE_DISEASES', 'Rare Diseases'), ('ONCOLOGY', 'Oncology'), ('NEUROLOGY', 'Neurology'), ('GENETICS', 'Genetics'), ('DRUG_DEVELOPMENT', 'Drug Development'), ('CLINICAL_TRIALS', 'Clinical Trials'), ('BIOMARKERS', 'Biomarkers'), ('GENOMICS', 'Genomics'), ('OTHER', 'Other')], max_length=50)),
                ('research_interests', models.TextField(help_text='Detailed research interests')),
                ('current_studies', models.JSONField(default=list, help_text='Active research studies')),
                ('highest_degree', models.CharField(max_length=50)),
                ('years_experience', models.PositiveIntegerField(default=0)),
                ('publications_count', models.PositiveIntegerField(default=0)),
                ('institutional_verification', models.BooleanField(default=False)),
                ('verification_documents', models.JSONField(default=list)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='researcher_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ResearchConsent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('study_identifier', models.CharField(help_text='Research study or drug trial identifier', max_length=100)),
                ('consent_type', models.CharField(choices=[('GENERAL_RESEARCH', 'General Research Participation'), ('DRUG_EFFICACY', 'Drug Efficacy Research'), ('FAMILY_HISTORY', 'Family Medical History Research'), ('GENETIC_DATA', 'Genetic Data Research'), ('LONGITUDINAL_STUDY', 'Longitudinal Health Study'), ('ADHERENCE_MONITORING', 'Medication Adherence Monitoring'), ('OUTCOMES_RESEARCH', 'Clinical Outcomes Research'), ('BIOMARKER_RESEARCH', 'Biomarker Research')], max_length=50)),
                ('consented', models.BooleanField(default=False)),
                ('consent_date', models.DateTimeField(blank=True, null=True)),
                ('consent_version', models.CharField(default='1.0', max_length=20)),
                ('withdrawn', models.BooleanField(default=False)),
                ('withdrawal_date', models.DateTimeField(blank=True, null=True)),
                ('withdrawal_reason', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('consent_document_url', models.URLField(blank=True, help_text='Link to signed consent document', null=True)),
                ('inherited_from_family_member', models.ForeignKey(blank=True, help_text='If consent inherited from family member', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.researchconsent')),
                ('pharmaceutical_tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.pharmaceuticaltenant')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='research_consents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'research_consents',
            },
        ),
        migrations.CreateModel(
            name='RefreshToken',
            fields=[
                ('token_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token_hash', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('is_revoked', models.BooleanField(default=False)),
                ('rotation_count', models.IntegerField(default=0)),
                ('created_ip', models.GenericIPAddressField()),
                ('last_used_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('previous_token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.refreshtoken')),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='refresh_token', to='users.usersession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refresh_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'refresh_tokens',
            },
        ),
        migrations.CreateModel(
            name='ProviderProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medical_license_number', models.CharField(max_length=50)),
                ('npi_number', models.CharField(max_length=10)),
                ('specialty', models.CharField(choices=[('RARE_DISEASE', 'Rare Disease Specialist'), ('GENETICS', 'Medical Genetics'), ('NEUROLOGY', 'Neurology'), ('ONCOLOGY', 'Oncology'), ('CARDIOLOGY', 'Cardiology'), ('ENDOCRINOLOGY', 'Endocrinology'), ('IMMUNOLOGY', 'Immunology'), ('PEDIATRICS', 'Pediatrics'), ('INTERNAL_MEDICINE', 'Internal Medicine'), ('FAMILY_MEDICINE', 'Family Medicine'), ('OTHER', 'Other Specialty')], max_length=40)),
                ('practice_name', models.CharField(max_length=255)),
                ('practice_address', models.TextField()),
                ('accepting_new_patients', models.BooleanField(default=True)),
                ('telemedicine_available', models.BooleanField(default=False)),
                ('years_of_experience', models.PositiveSmallIntegerField(default=0)),
                ('rare_condition_specialties', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='provider_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PharmcoProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255)),
                ('role_at_company', models.CharField(choices=[('RESEARCHER', 'Researcher'), ('CLINICAL_AFFAIRS', 'Clinical Affairs'), ('REGULATORY_AFFAIRS', 'Regulatory Affairs'), ('MEDICAL_AFFAIRS', 'Medical Affairs'), ('DATA_SCIENTIST', 'Data Scientist'), ('COMPLIANCE_OFFICER', 'Compliance Officer'), ('EXECUTIVE', 'Executive'), ('OTHER', 'Other')], max_length=50)),
                ('regulatory_id', models.CharField(max_length=100)),
                ('primary_research_focus', models.CharField(choices=[('RARE_DISEASES', 'Rare Diseases'), ('ONCOLOGY', 'Oncology'), ('NEUROLOGY', 'Neurology'), ('CARDIOLOGY', 'Cardiology'), ('IMMUNOLOGY', 'Immunology'), ('ENDOCRINOLOGY', 'Endocrinology'), ('PEDIATRICS', 'Pediatrics'), ('GENETICS', 'Genetics'), ('DRUG_DEVELOPMENT', 'Drug Development'), ('CLINICAL_TRIALS', 'Clinical Trials'), ('OTHER', 'Other')], max_length=50)),
                ('company_address', models.TextField(blank=True)),
                ('monitored_medications', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pharmco_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PatientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medical_id', healthcare.fields.EncryptedCharField(blank=True)),
                ('blood_type', healthcare.fields.EncryptedCharField(blank=True)),
                ('allergies', healthcare.fields.EncryptedTextField(blank=True)),
                ('emergency_contact_name', healthcare.fields.EncryptedCharField(blank=True)),
                ('emergency_contact_phone', healthcare.fields.EncryptedCharField(blank=True)),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50)),
                ('primary_condition', healthcare.fields.EncryptedCharField(blank=True)),
                ('condition_diagnosis_date', healthcare.fields.EncryptedDateField(blank=True, null=True)),
                ('medication_adherence_monitoring_consent', models.BooleanField(default=False)),
                ('medication_adherence_consent_date', models.DateTimeField(blank=True, null=True)),
                ('vitals_monitoring_consent', models.BooleanField(default=False)),
                ('vitals_monitoring_consent_date', models.DateTimeField(blank=True, null=True)),
                ('research_participation_consent', models.BooleanField(default=False)),
                ('research_consent_date', models.DateTimeField(blank=True, null=True)),
                ('identity_verified', models.BooleanField(default=False)),
                ('identity_verification_date', models.DateTimeField(blank=True, null=True)),
                ('identity_verification_method', models.CharField(blank=True, max_length=50)),
                ('verification_deadline_notified', models.BooleanField(default=False)),
                ('first_login_date', models.DateTimeField(blank=True, null=True)),
                ('medication_reminder_enabled', models.BooleanField(default=True)),
                ('medication_reminder_methods', models.JSONField(default=list, help_text="['email', 'sms', 'push', 'smartwatch']")),
                ('medication_reminder_frequency', models.CharField(choices=[('immediate', 'Immediate'), ('15min', '15 minutes before'), ('30min', '30 minutes before'), ('1hour', '1 hour before')], default='immediate', max_length=20)),
                ('appointment_reminder_enabled', models.BooleanField(default=True)),
                ('appointment_reminder_methods', models.JSONField(default=list)),
                ('appointment_reminder_advance_days', models.PositiveIntegerField(default=1)),
                ('smartwatch_device_id', models.CharField(blank=True, max_length=255, null=True)),
                ('smartwatch_integration_active', models.BooleanField(default=False)),
                ('rare_disease_diagnosed', models.BooleanField(default=False)),
                ('rare_disease_conditions', models.JSONField(default=list, help_text='List of rare conditions')),
                ('rare_disease_diagnosis_date', models.DateField(blank=True, null=True)),
                ('genetic_counseling_received', models.BooleanField(default=False)),
                ('custom_drug_protocols', models.JSONField(default=list, help_text='Active custom drug protocols')),
                ('protocol_adherence_monitoring', models.BooleanField(default=False)),
                ('family_history_data', models.JSONField(default=dict, help_text='Structured family medical history')),
                ('genetic_data_sharing_consent', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patient_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PatientAuthorizedCaregiver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authorized_at', models.DateTimeField(auto_now_add=True)),
                ('access_level', models.CharField(choices=[('VIEW_ONLY', 'View Only'), ('SCHEDULE', 'Scheduling'), ('MEDICATIONS', 'Medication Management'), ('FULL', 'Full Access')], max_length=20)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('authorized_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='caregiver_authorizations_granted', to=settings.AUTH_USER_MODEL)),
                ('caregiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_authorizations', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='caregiver_authorizations', to='users.patientprofile')),
            ],
        ),
        migrations.CreateModel(
            name='HIPAADocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('document_type', models.CharField(choices=[('PRIVACY_NOTICE', 'Notice of Privacy Practices'), ('TERMS_OF_SERVICE', 'Terms of Service'), ('PATIENT_RIGHTS', 'Patient Rights'), ('DATA_USE', 'Data Use Agreement'), ('CAREGIVER_AGREEMENT', 'Caregiver Authorization Agreement'), ('RESEARCH_CONSENT', 'Research Participation Consent')], max_length=30)),
                ('version', models.CharField(max_length=20)),
                ('content', models.TextField()),
                ('effective_date', models.DateField()),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('checksum', models.CharField(max_length=64)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-effective_date', 'document_type'],
            },
        ),
        migrations.CreateModel(
            name='EmergencyAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_identifier', healthcare.fields.EncryptedCharField()),
                ('reason', models.CharField(choices=[('LIFE_THREATENING', 'Life-Threatening Emergency'), ('URGENT_CARE', 'Urgent Care Required'), ('PATIENT_UNABLE', 'Patient Unable to Provide Consent'), ('IMMINENT_DANGER', 'Imminent Danger to Patient'), ('OTHER', 'Other Emergency')], max_length=20)),
                ('detailed_reason', models.TextField()),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('accessed_at', models.DateTimeField(auto_now=True)),
                ('access_ended_at', models.DateTimeField(blank=True, null=True)),
                ('phi_accessed', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('reviewed', models.BooleanField(default=False)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True)),
                ('access_justified', models.BooleanField(null=True)),
                ('notifications_sent', models.BooleanField(default=False)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_accesses', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_emergencies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Emergency Access',
                'verbose_name_plural': 'Emergency Accesses',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='ConsentRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consent_type', models.CharField(choices=[('TERMS_OF_SERVICE', 'Terms of Service'), ('PRIVACY_NOTICE', 'HIPAA Privacy Notice'), ('MEDICATION_MONITORING', 'Medication Adherence Monitoring'), ('VITALS_MONITORING', 'Vitals Monitoring'), ('RESEARCH_PARTICIPATION', 'Research Participation'), ('DATA_SHARING', 'Data Sharing'), ('CAREGIVER_ACCESS', 'Caregiver Access Authorization'), ('PHI_HANDLING', 'PHI Handling Agreement'), ('IDENTITY_VERIFICATION', 'Identity Verification')], max_length=30)),
                ('consented', models.BooleanField()),
                ('signature_timestamp', models.DateTimeField(auto_now_add=True)),
                ('signature_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('signature_user_agent', models.TextField(blank=True)),
                ('document_version', models.CharField(blank=True, max_length=20)),
                ('document_checksum', models.CharField(blank=True, max_length=64)),
                ('revoked', models.BooleanField(default=False)),
                ('revoked_at', models.DateTimeField(blank=True, null=True)),
                ('revocation_reason', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consent_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Consent Record',
                'verbose_name_plural': 'Consent Records',
                'ordering': ['-signature_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ComplianceProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization_name', models.CharField(max_length=255)),
                ('compliance_role', models.CharField(choices=[('HIPAA_OFFICER', 'HIPAA Compliance Officer'), ('DPO', 'Data Protection Officer'), ('QUALITY_ASSURANCE', 'Quality Assurance'), ('REGULATORY_AFFAIRS', 'Regulatory Affairs'), ('AUDIT_MANAGER', 'Audit Manager'), ('CHIEF_COMPLIANCE', 'Chief Compliance Officer')], max_length=30)),
                ('license_number', models.CharField(blank=True, max_length=100)),
                ('compliance_areas', models.JSONField(default=list, help_text='Areas of compliance oversight')),
                ('audit_permissions', models.JSONField(default=list, help_text='Systems they can audit')),
                ('certifications', models.JSONField(default=list, help_text='Professional certifications')),
                ('certification_expiry', models.DateField(blank=True, null=True)),
                ('can_view_all_phi', models.BooleanField(default=False)),
                ('can_generate_reports', models.BooleanField(default=True)),
                ('can_audit_access_logs', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='compliance_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CaregiverRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship', models.CharField(max_length=100)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('DENIED', 'Denied'), ('EXPIRED', 'Expired')], default='PENDING', max_length=10)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('response_notes', models.TextField(blank=True)),
                ('patient_notified', models.BooleanField(default=False)),
                ('reminder_sent', models.BooleanField(default=False)),
                ('caregiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='caregiver_requests', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_caregiver_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='CaregiverProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_to_patient', models.CharField(choices=[('PARENT', 'Parent'), ('SPOUSE', 'Spouse/Partner'), ('CHILD', 'Child'), ('SIBLING', 'Sibling'), ('GRANDPARENT', 'Grandparent'), ('GRANDCHILD', 'Grandchild'), ('FRIEND', 'Friend'), ('PROFESSIONAL_CAREGIVER', 'Professional Caregiver'), ('LEGAL_GUARDIAN', 'Legal Guardian'), ('HEALTHCARE_PROXY', 'Healthcare Proxy'), ('OTHER_FAMILY', 'Other Family Member'), ('OTHER', 'Other')], max_length=30)),
                ('caregiver_type', models.CharField(choices=[('FAMILY', 'Family Member'), ('PROFESSIONAL', 'Professional Caregiver'), ('FRIEND', 'Friend'), ('LEGAL_GUARDIAN', 'Legal Guardian'), ('HEALTHCARE_PROXY', 'Healthcare Proxy'), ('OTHER', 'Other')], max_length=20)),
                ('patient_email', models.EmailField(max_length=254)),
                ('access_level', models.CharField(choices=[('VIEW_ONLY', 'View Only'), ('SCHEDULE', 'Scheduling'), ('MEDICATIONS', 'Medication Management'), ('FULL', 'Full Access')], default='VIEW_ONLY', max_length=20)),
                ('authorization_documentation', models.BooleanField(default=False)),
                ('is_primary_caregiver', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='caregiver_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AuditTrail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('action_type', models.CharField(choices=[('LOGIN', 'User Login'), ('LOGOUT', 'User Logout'), ('TOKEN_REFRESH', 'Token Refresh'), ('PATIENT_ACCESS', 'Patient Data Access'), ('EHR_ACCESS', 'EHR Data Access'), ('RESEARCH_DATA_ACCESS', 'Research Data Access'), ('CONSENT_GRANTED', 'Research Consent Granted'), ('CONSENT_WITHDRAWN', 'Research Consent Withdrawn'), ('EMERGENCY_ACCESS', 'Emergency Access Used'), ('CROSS_TENANT_ACCESS', 'Cross-Tenant Data Access'), ('DATA_EXPORT', 'Data Export'), ('PERMISSION_CHANGE', 'Permission Modified'), ('SECURITY_EVENT', 'Security Event')], max_length=50)),
                ('resource_type', models.CharField(blank=True, max_length=50, null=True)),
                ('resource_id', models.CharField(blank=True, max_length=255, null=True)),
                ('action_description', models.TextField()),
                ('request_data', models.JSONField(blank=True, help_text='Sanitized request data', null=True)),
                ('response_status', models.CharField(blank=True, max_length=10, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('study_identifier', models.CharField(blank=True, max_length=100, null=True)),
                ('patient_identifier', models.CharField(blank=True, max_length=255, null=True)),
                ('research_purpose', models.CharField(blank=True, max_length=255, null=True)),
                ('risk_level', models.CharField(choices=[('LOW', 'Low Risk'), ('MEDIUM', 'Medium Risk'), ('HIGH', 'High Risk'), ('CRITICAL', 'Critical Risk')], default='LOW', max_length=20)),
                ('compliance_flags', models.JSONField(default=list, help_text='Compliance violations or notes')),
                ('pharmaceutical_tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.pharmaceuticaltenant')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.usersession')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'audit_trails',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='pharmaceutical_tenants',
            field=models.ManyToManyField(blank=True, help_text='Pharmaceutical companies this user has access to', related_name='users', to='users.pharmaceuticaltenant'),
        ),
        migrations.AddField(
            model_name='user',
            name='primary_pharmaceutical_tenant',
            field=models.ForeignKey(blank=True, help_text='Primary pharmaceutical tenant for this user', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_users', to='users.pharmaceuticaltenant'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user', 'is_active'], name='user_sessio_user_id_bb1b83_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['expires_at'], name='user_sessio_expires_66ae96_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['pharmaceutical_tenant', 'is_active'], name='user_sessio_pharmac_36e831_idx'),
        ),
        migrations.AddIndex(
            model_name='researchconsent',
            index=models.Index(fields=['pharmaceutical_tenant', 'study_identifier'], name='research_co_pharmac_5e811c_idx'),
        ),
        migrations.AddIndex(
            model_name='researchconsent',
            index=models.Index(fields=['user', 'consented'], name='research_co_user_id_9301ad_idx'),
        ),
        migrations.AddIndex(
            model_name='researchconsent',
            index=models.Index(fields=['consent_date'], name='research_co_consent_f088a2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='researchconsent',
            unique_together={('user', 'pharmaceutical_tenant', 'study_identifier', 'consent_type')},
        ),
        migrations.AddIndex(
            model_name='refreshtoken',
            index=models.Index(fields=['user', 'is_revoked'], name='refresh_tok_user_id_893d6c_idx'),
        ),
        migrations.AddIndex(
            model_name='refreshtoken',
            index=models.Index(fields=['expires_at'], name='refresh_tok_expires_a128d9_idx'),
        ),
        migrations.AddIndex(
            model_name='refreshtoken',
            index=models.Index(fields=['token_hash'], name='refresh_tok_token_h_2fa7c6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='patientauthorizedcaregiver',
            unique_together={('patient', 'caregiver')},
        ),
        migrations.AlterUniqueTogether(
            name='hipaadocument',
            unique_together={('document_type', 'version')},
        ),
        migrations.AlterUniqueTogether(
            name='caregiverrequest',
            unique_together={('caregiver', 'patient')},
        ),
        migrations.AddIndex(
            model_name='audittrail',
            index=models.Index(fields=['timestamp'], name='audit_trail_timesta_8639ee_idx'),
        ),
        migrations.AddIndex(
            model_name='audittrail',
            index=models.Index(fields=['user', 'timestamp'], name='audit_trail_user_id_bda44d_idx'),
        ),
        migrations.AddIndex(
            model_name='audittrail',
            index=models.Index(fields=['pharmaceutical_tenant', 'timestamp'], name='audit_trail_pharmac_bfbb71_idx'),
        ),
        migrations.AddIndex(
            model_name='audittrail',
            index=models.Index(fields=['action_type', 'timestamp'], name='audit_trail_action__174cf3_idx'),
        ),
        migrations.AddIndex(
            model_name='audittrail',
            index=models.Index(fields=['study_identifier'], name='audit_trail_study_i_e16eb5_idx'),
        ),
        migrations.AddIndex(
            model_name='audittrail',
            index=models.Index(fields=['risk_level'], name='audit_trail_risk_le_aa07e9_idx'),
        ),
    ]
