# Generated by Django 4.2.7 on 2025-06-02 11:07

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_cryptography.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('role', models.CharField(choices=[('patient', 'Patient'), ('provider', 'Healthcare Provider'), ('pharmco', 'Pharmaceutical Company'), ('admin', 'Administrator'), ('caregiver', 'Caregiver'), ('researcher', 'Researcher'), ('compliance', 'Compliance Officer')], default='patient', max_length=10)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('login_attempts', models.IntegerField(default=0)),
                ('account_locked', models.BooleanField(default=False)),
                ('account_locked_time', models.DateTimeField(blank=True, null=True)),
                ('password_last_changed', models.DateTimeField(blank=True, null=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('terms_accepted', models.BooleanField(default=False)),
                ('hipaa_privacy_acknowledged', models.BooleanField(default=False)),
                ('hipaa_privacy_acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('data_sharing_consent', models.BooleanField(default=False)),
                ('caregiver_authorization_acknowledged', models.BooleanField(default=False)),
                ('phi_handling_acknowledged', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=False)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('email_verification_token', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, null=True)),
                ('email_verification_sent_at', models.DateTimeField(blank=True, null=True)),
                ('reset_password_token', models.UUIDField(blank=True, null=True)),
                ('reset_password_token_created_at', models.DateTimeField(blank=True, null=True)),
                ('profile_created', models.BooleanField(default=False)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TwoFactorDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secret_key', models.CharField(max_length=255)),
                ('confirmed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='two_factor_device', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TemporaryRegistrationData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='temp_registration_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Temporary Registration Data',
                'verbose_name_plural': 'Temporary Registration Data',
            },
        ),
        migrations.CreateModel(
            name='ResearcherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution', models.CharField(max_length=255)),
                ('primary_research_area', models.CharField(choices=[('RARE_DISEASES', 'Rare Diseases'), ('CLINICAL_TRIALS', 'Clinical Trials'), ('GENETICS', 'Genetics Research'), ('PHARMACOLOGY', 'Pharmacology'), ('EPIDEMIOLOGY', 'Epidemiology'), ('BIOSTATISTICS', 'Biostatistics'), ('HEALTH_OUTCOMES', 'Health Outcomes Research'), ('DRUG_DEVELOPMENT', 'Drug Development'), ('PATIENT_REGISTRIES', 'Patient Registries'), ('BIOMARKER_RESEARCH', 'Biomarker Research'), ('DIGITAL_HEALTH', 'Digital Health'), ('OTHER', 'Other Research Area')], max_length=50)),
                ('qualifications_background', models.TextField()),
                ('active_studies', models.TextField(blank=True)),
                ('irb_approval_confirmed', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='researcher_profile', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_researchers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProviderProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medical_license_number', models.CharField(max_length=50)),
                ('npi_number', models.CharField(max_length=10)),
                ('specialty', models.CharField(choices=[('RARE_DISEASE', 'Rare Disease Specialist'), ('GENETICS', 'Medical Genetics'), ('NEUROLOGY', 'Neurology'), ('ONCOLOGY', 'Oncology'), ('CARDIOLOGY', 'Cardiology'), ('ENDOCRINOLOGY', 'Endocrinology'), ('IMMUNOLOGY', 'Immunology'), ('PEDIATRICS', 'Pediatrics'), ('INTERNAL_MEDICINE', 'Internal Medicine'), ('FAMILY_MEDICINE', 'Family Medicine'), ('OTHER', 'Other Specialty')], max_length=40)),
                ('practice_name', models.CharField(max_length=255)),
                ('practice_address', models.TextField()),
                ('accepting_new_patients', models.BooleanField(default=True)),
                ('telemedicine_available', models.BooleanField(default=False)),
                ('years_of_experience', models.PositiveSmallIntegerField(default=0)),
                ('rare_condition_specialties', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='provider_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PharmcoProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255)),
                ('role_at_company', models.CharField(choices=[('RESEARCHER', 'Researcher'), ('CLINICAL_AFFAIRS', 'Clinical Affairs'), ('REGULATORY_AFFAIRS', 'Regulatory Affairs'), ('MEDICAL_AFFAIRS', 'Medical Affairs'), ('DATA_SCIENTIST', 'Data Scientist'), ('COMPLIANCE_OFFICER', 'Compliance Officer'), ('EXECUTIVE', 'Executive'), ('OTHER', 'Other')], max_length=50)),
                ('regulatory_id', models.CharField(max_length=100)),
                ('primary_research_focus', models.CharField(choices=[('RARE_DISEASES', 'Rare Diseases'), ('ONCOLOGY', 'Oncology'), ('NEUROLOGY', 'Neurology'), ('CARDIOLOGY', 'Cardiology'), ('IMMUNOLOGY', 'Immunology'), ('ENDOCRINOLOGY', 'Endocrinology'), ('PEDIATRICS', 'Pediatrics'), ('GENETICS', 'Genetics'), ('DRUG_DEVELOPMENT', 'Drug Development'), ('CLINICAL_TRIALS', 'Clinical Trials'), ('OTHER', 'Other')], max_length=50)),
                ('company_address', models.TextField(blank=True)),
                ('monitored_medications', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pharmco_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PatientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medical_id', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=50))),
                ('blood_type', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=10))),
                ('allergies', django_cryptography.fields.encrypt(models.TextField(blank=True))),
                ('emergency_contact_name', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255))),
                ('emergency_contact_phone', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=20))),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50)),
                ('primary_condition', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255))),
                ('condition_diagnosis_date', django_cryptography.fields.encrypt(models.DateField(blank=True, null=True))),
                ('medication_adherence_monitoring_consent', models.BooleanField(default=False)),
                ('medication_adherence_consent_date', models.DateTimeField(blank=True, null=True)),
                ('vitals_monitoring_consent', models.BooleanField(default=False)),
                ('vitals_monitoring_consent_date', models.DateTimeField(blank=True, null=True)),
                ('research_participation_consent', models.BooleanField(default=False)),
                ('research_consent_date', models.DateTimeField(blank=True, null=True)),
                ('identity_verified', models.BooleanField(default=False)),
                ('identity_verification_date', models.DateTimeField(blank=True, null=True)),
                ('identity_verification_method', models.CharField(blank=True, max_length=50)),
                ('verification_deadline_notified', models.BooleanField(default=False)),
                ('first_login_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patient_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmergencyAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_identifier', django_cryptography.fields.encrypt(models.CharField(max_length=255))),
                ('reason', models.CharField(choices=[('LIFE_THREATENING', 'Life-Threatening Emergency'), ('URGENT_CARE', 'Urgent Care Required'), ('PATIENT_UNABLE', 'Patient Unable to Provide Consent'), ('IMMINENT_DANGER', 'Imminent Danger to Patient'), ('OTHER', 'Other Emergency')], max_length=20)),
                ('detailed_reason', models.TextField()),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('accessed_at', models.DateTimeField(auto_now=True)),
                ('access_ended_at', models.DateTimeField(blank=True, null=True)),
                ('phi_accessed', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('reviewed', models.BooleanField(default=False)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True)),
                ('access_justified', models.BooleanField(null=True)),
                ('notifications_sent', models.BooleanField(default=False)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_accesses', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_emergencies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Emergency Access',
                'verbose_name_plural': 'Emergency Accesses',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='ConsentRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consent_type', models.CharField(choices=[('TERMS_OF_SERVICE', 'Terms of Service'), ('PRIVACY_NOTICE', 'HIPAA Privacy Notice'), ('MEDICATION_MONITORING', 'Medication Adherence Monitoring'), ('VITALS_MONITORING', 'Vitals Monitoring'), ('RESEARCH_PARTICIPATION', 'Research Participation'), ('DATA_SHARING', 'Data Sharing'), ('CAREGIVER_ACCESS', 'Caregiver Access Authorization'), ('PHI_HANDLING', 'PHI Handling Agreement'), ('IDENTITY_VERIFICATION', 'Identity Verification')], max_length=30)),
                ('consented', models.BooleanField()),
                ('signature_timestamp', models.DateTimeField(auto_now_add=True)),
                ('signature_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('signature_user_agent', models.TextField(blank=True)),
                ('document_version', models.CharField(blank=True, max_length=20)),
                ('document_checksum', models.CharField(blank=True, max_length=64)),
                ('revoked', models.BooleanField(default=False)),
                ('revoked_at', models.DateTimeField(blank=True, null=True)),
                ('revocation_reason', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consent_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Consent Record',
                'verbose_name_plural': 'Consent Records',
                'ordering': ['-signature_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ComplianceProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(max_length=255)),
                ('job_title', models.CharField(max_length=255)),
                ('compliance_certification', models.CharField(choices=[('CHPC', 'Certified in Healthcare Privacy Compliance'), ('CHPS', 'Certified in Healthcare Privacy and Security'), ('HCCA', 'Healthcare Compliance Association Certified'), ('OTHER', 'Other Certification')], max_length=20)),
                ('primary_specialization', models.CharField(choices=[('HIPAA', 'HIPAA Compliance'), ('PRIVACY', 'Privacy Management'), ('SECURITY', 'Security Compliance'), ('AUDIT', 'Audit and Monitoring'), ('GENERAL', 'General Healthcare Compliance')], max_length=20)),
                ('regulatory_experience', models.TextField()),
                ('certification_number', models.CharField(blank=True, max_length=100)),
                ('certification_expiry', models.DateField(blank=True, null=True)),
                ('can_view_audit_logs', models.BooleanField(default=True)),
                ('can_view_phi', models.BooleanField(default=True)),
                ('can_manage_emergencies', models.BooleanField(default=True)),
                ('added_date', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='compliance_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CaregiverProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_to_patient', models.CharField(choices=[('PARENT', 'Parent'), ('SPOUSE', 'Spouse/Partner'), ('CHILD', 'Child'), ('SIBLING', 'Sibling'), ('GRANDPARENT', 'Grandparent'), ('GRANDCHILD', 'Grandchild'), ('FRIEND', 'Friend'), ('PROFESSIONAL_CAREGIVER', 'Professional Caregiver'), ('LEGAL_GUARDIAN', 'Legal Guardian'), ('HEALTHCARE_PROXY', 'Healthcare Proxy'), ('OTHER_FAMILY', 'Other Family Member'), ('OTHER', 'Other')], max_length=30)),
                ('caregiver_type', models.CharField(choices=[('FAMILY', 'Family Member'), ('PROFESSIONAL', 'Professional Caregiver'), ('FRIEND', 'Friend'), ('LEGAL_GUARDIAN', 'Legal Guardian'), ('HEALTHCARE_PROXY', 'Healthcare Proxy'), ('OTHER', 'Other')], max_length=20)),
                ('patient_email', models.EmailField(max_length=254)),
                ('access_level', models.CharField(choices=[('VIEW_ONLY', 'View Only'), ('SCHEDULE', 'Scheduling'), ('MEDICATIONS', 'Medication Management'), ('FULL', 'Full Access')], default='VIEW_ONLY', max_length=20)),
                ('authorization_documentation', models.BooleanField(default=False)),
                ('is_primary_caregiver', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='caregiver_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PatientAuthorizedCaregiver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authorized_at', models.DateTimeField(auto_now_add=True)),
                ('access_level', models.CharField(choices=[('VIEW_ONLY', 'View Only'), ('SCHEDULE', 'Scheduling'), ('MEDICATIONS', 'Medication Management'), ('FULL', 'Full Access')], max_length=20)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('authorized_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='caregiver_authorizations_granted', to=settings.AUTH_USER_MODEL)),
                ('caregiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_authorizations', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='caregiver_authorizations', to='users.patientprofile')),
            ],
            options={
                'unique_together': {('patient', 'caregiver')},
            },
        ),
        migrations.CreateModel(
            name='HIPAADocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('document_type', models.CharField(choices=[('PRIVACY_NOTICE', 'Notice of Privacy Practices'), ('TERMS_OF_SERVICE', 'Terms of Service'), ('PATIENT_RIGHTS', 'Patient Rights'), ('DATA_USE', 'Data Use Agreement'), ('CAREGIVER_AGREEMENT', 'Caregiver Authorization Agreement'), ('RESEARCH_CONSENT', 'Research Participation Consent')], max_length=30)),
                ('version', models.CharField(max_length=20)),
                ('content', models.TextField()),
                ('effective_date', models.DateField()),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('checksum', models.CharField(max_length=64)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-effective_date', 'document_type'],
                'unique_together': {('document_type', 'version')},
            },
        ),
        migrations.CreateModel(
            name='CaregiverRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship', models.CharField(max_length=100)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('DENIED', 'Denied'), ('EXPIRED', 'Expired')], default='PENDING', max_length=10)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('response_notes', models.TextField(blank=True)),
                ('patient_notified', models.BooleanField(default=False)),
                ('reminder_sent', models.BooleanField(default=False)),
                ('caregiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='caregiver_requests', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_caregiver_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-requested_at'],
                'unique_together': {('caregiver', 'patient')},
            },
        ),
    ]
